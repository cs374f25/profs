"""SQLAlchemy model classes (database tables) generated by `sqlacodegen`."""

# NOTE Using flask_appbuilder.Model as the base class instead of Base.

import datetime
from typing import Optional

from flask_appbuilder import Model
from sqlalchemy import (
    Column,
    Date,
    ForeignKeyConstraint,
    Identity,
    Integer,
    PrimaryKeyConstraint,
    String,
    Table,
)
from sqlalchemy.orm import (
    Mapped,
    mapped_column,
    relationship,
)


class College(Model):
    __tablename__ = 'college'
    __table_args__ = (
        PrimaryKeyConstraint('code', name='college_pkey'),
        {'comment': 'Needed for name lookups and thank-you emails.'}
    )

    code: Mapped[str] = mapped_column(String(8), primary_key=True, comment='Ex: CISE')
    name: Mapped[str] = mapped_column(String(64), nullable=False)
    dean_full_name: Mapped[str] = mapped_column(String(32), nullable=False)
    dean_email: Mapped[str] = mapped_column(String(32), nullable=False)
    dean_first_name: Mapped[str] = mapped_column(String(32), nullable=False)

    department: Mapped[list['Department']] = relationship('Department', back_populates='college')

    def __str__(self):
        return f"{self.name} ({self.code})"


class Event(Model):
    __tablename__ = 'event'
    __table_args__ = (
        PrimaryKeyConstraint('year', name='event_pkey'),
        {'comment': 'More attributes to be added later: guest speaker, theme, etc.'}
    )

    year: Mapped[int] = mapped_column(Integer, primary_key=True, comment='One event per year')
    date: Mapped[datetime.date] = mapped_column(Date, nullable=False, comment='The exact date of the event')

    timeslot: Mapped[list['Timeslot']] = relationship('Timeslot', back_populates='event')
    workshop: Mapped[list['Workshop']] = relationship('Workshop', back_populates='event')
    organizer: Mapped[list['Organizer']] = relationship('Organizer', back_populates='event')

    def __str__(self):
        return f"{self.year}"


class Feature(Model):
    __tablename__ = 'feature'
    __table_args__ = (
        PrimaryKeyConstraint('name', name='feature_pkey'),
        {'comment': 'Just to lookup some features like sink, computers, projector, etc.'}
    )

    name: Mapped[str] = mapped_column(String(32), primary_key=True)
    description: Mapped[Optional[str]] = mapped_column(String(128))

    room: Mapped[list['Room']] = relationship('Room', secondary='room_feature', back_populates='feature')

    def __str__(self):
        return f"{self.name}"


class Room(Model):
    __tablename__ = 'room'
    __table_args__ = (
        PrimaryKeyConstraint('name', name='room_pkey'),
        {'comment': 'Rooms on campus that may be used by madiSTEM.'}
    )

    name: Mapped[str] = mapped_column(String(32), primary_key=True, comment='The short name of the room, like King 250')
    type: Mapped[str] = mapped_column(String(32), nullable=False, comment='Ex: classroom, lab')
    capacity: Mapped[int] = mapped_column(Integer, nullable=False)
    notes: Mapped[Optional[str]] = mapped_column(String(64))

    feature: Mapped[list['Feature']] = relationship('Feature', secondary='room_feature', back_populates='room')
    workshop: Mapped[list['Workshop']] = relationship('Workshop', back_populates='room')

    def __str__(self):
        return f"{self.name} ({self.type})"


class Department(Model):
    __tablename__ = 'department'
    __table_args__ = (
        ForeignKeyConstraint(['college_code'], ['college.code'], name='department_college_code_fkey'),
        PrimaryKeyConstraint('code', name='department_pkey'),
        {'comment': 'Needed for name lookups and thank-you emails.'}
    )

    code: Mapped[str] = mapped_column(String(8), primary_key=True, comment='Ex: CS')
    name: Mapped[str] = mapped_column(String(64), nullable=False)
    auh_full_name: Mapped[str] = mapped_column(String(32), nullable=False)
    auh_email: Mapped[str] = mapped_column(String(32), nullable=False)
    college_code: Mapped[str] = mapped_column(String(8), nullable=False)

    college: Mapped['College'] = relationship('College', back_populates='department')
    person: Mapped[list['Person']] = relationship('Person', back_populates='department')

    def __str__(self):
        return f"{self.name} ({self.code})"


t_room_feature = Table(
    'room_feature', Model.metadata,
    Column('room_name', String(32), primary_key=True),
    Column('feature_name', String(32), primary_key=True),
    ForeignKeyConstraint(['feature_name'], ['feature.name'], name='room_feature_feature_name_fkey'),
    ForeignKeyConstraint(['room_name'], ['room.name'], name='room_feature_room_name_fkey'),
    PrimaryKeyConstraint('room_name', 'feature_name', name='room_feature_pkey'),
    comment='M-N connection between room and features (see https://www.lib.jmu.edu/tech-classrooms/).'
)


class Timeslot(Model):
    __tablename__ = 'timeslot'
    __table_args__ = (
        ForeignKeyConstraint(['event_year'], ['event.year'], name='timeslot_event_year_fkey'),
        PrimaryKeyConstraint('event_year', 'id', name='timeslot_pkey'),
        {'comment': 'An event is divided into time slots -- these are the schedule for the day.'}
    )

    event_year: Mapped[int] = mapped_column(Integer, primary_key=True)
    id: Mapped[int] = mapped_column(Integer, primary_key=True, comment='The slots are numbered 1..N from earliest to latest')
    name: Mapped[str] = mapped_column(String(32), nullable=False, comment='Ex: registration, lunch, speaker, workshops')
    # Unfortunately, sqlalchemy.Time is not supported by Flask-AppBuilder
    beg_time: Mapped[str] = mapped_column(String(8), nullable=False)
    end_time: Mapped[str] = mapped_column(String(8), nullable=False)

    event: Mapped['Event'] = relationship('Event', back_populates='timeslot')
    workshop: Mapped[list['Workshop']] = relationship('Workshop', secondary='workshop_timeslot', back_populates='timeslot')

    def __str__(self):
        return f"{self.name} ({str(self.beg_time)[:-3]}-{str(self.end_time)[:-3]})"


class Workshop(Model):
    __tablename__ = 'workshop'
    __table_args__ = (
        ForeignKeyConstraint(['event_year'], ['event.year'], name='workshop_event_year_fkey'),
        ForeignKeyConstraint(['room_name'], ['room.name'], name='workshop_room_name_fkey'),
        PrimaryKeyConstraint('id', name='workshop_pkey'),
        {'comment': 'Holds all the workshop information.'}
    )

    id: Mapped[int] = mapped_column(Integer, Identity(start=1, increment=1, minvalue=1, maxvalue=2147483647, cycle=False, cache=1), primary_key=True, comment='Generated auto-increment ID because the title may be edited over time.  This ID is unique across years.')
    state: Mapped[str] = mapped_column(String(32), nullable=False, comment='The state of the workshop -- proposed, accepted, file, etc.  The exact states are not fully defined.')
    title: Mapped[str] = mapped_column(String(64), nullable=False)
    event_year: Mapped[int] = mapped_column(Integer, nullable=False, comment='Not part of the key, but required.')
    advertisement: Mapped[Optional[str]] = mapped_column(String(512), comment='The workshop description to be shown on the website.')
    description: Mapped[Optional[str]] = mapped_column(String(1024), comment='The full description of the workshop maybe with much more detail than the advertisement.')
    capacity: Mapped[Optional[int]] = mapped_column(Integer, comment='The max number of students that can be accommodated in this workshop.')
    computer_needs: Mapped[Optional[str]] = mapped_column(String(128))
    room_needs: Mapped[Optional[str]] = mapped_column(String(128))
    max_repeat: Mapped[Optional[int]] = mapped_column(Integer, comment='The number of times this workshop can be offered during the day.')
    parent_questions: Mapped[Optional[str]] = mapped_column(String(1024), comment='Follow-up information/questions for the attendee to share with their parents post event.')
    other_information: Mapped[Optional[str]] = mapped_column(String(512), comment='Any other information about the workshop to be shared with the organizers.')
    room_name: Mapped[Optional[str]] = mapped_column(String(32), comment='The room is assigned later in the process, so it can be null.')

    timeslot: Mapped[list['Timeslot']] = relationship('Timeslot', secondary='workshop_timeslot', back_populates='workshop')
    event: Mapped['Event'] = relationship('Event', back_populates='workshop')
    room: Mapped[Optional['Room']] = relationship('Room', back_populates='workshop')
    person_workshop: Mapped[list['PersonWorkshop']] = relationship('PersonWorkshop', back_populates='workshop')

    def __str__(self):
        return f"{self.title} ({self.state})"


class Person(Model):
    __tablename__ = 'person'
    __table_args__ = (
        ForeignKeyConstraint(['department_code'], ['department.code'], name='person_department_code_fkey'),
        PrimaryKeyConstraint('email', name='person_pkey'),
        {'comment': 'The super class entity for all types of people, with their basic information.'}
    )

    email: Mapped[str] = mapped_column(String(32), primary_key=True, comment='Use email as the unique identifier for all people')
    type: Mapped[str] = mapped_column(String(32), nullable=False, comment='Ex: student, faculty, other')
    first_name: Mapped[str] = mapped_column(String(32), nullable=False)
    last_name: Mapped[str] = mapped_column(String(32), nullable=False)
    department_code: Mapped[str] = mapped_column(String(8), nullable=False)
    phone: Mapped[Optional[str]] = mapped_column(String(16))

    department: Mapped['Department'] = relationship('Department', back_populates='person')
    organizer: Mapped[list['Organizer']] = relationship('Organizer', back_populates='person')
    person_workshop: Mapped[list['PersonWorkshop']] = relationship('PersonWorkshop', back_populates='person')

    def __str__(self):
        return f"{self.first_name} {self.last_name} ({self.type})"


t_workshop_timeslot = Table(
    'workshop_timeslot', Model.metadata,
    Column('workshop_id', Integer, primary_key=True),
    Column('timeslot_event_year', Integer, primary_key=True),
    Column('timeslot_id', Integer, primary_key=True),
    ForeignKeyConstraint(['timeslot_event_year', 'timeslot_id'], ['timeslot.event_year', 'timeslot.id'], name='workshop_timeslot_timeslot_event_year_timeslot_id_fkey'),
    ForeignKeyConstraint(['workshop_id'], ['workshop.id'], name='workshop_timeslot_workshop_id_fkey'),
    PrimaryKeyConstraint('workshop_id', 'timeslot_event_year', 'timeslot_id', name='workshop_timeslot_pkey'),
    comment='Connects the workshop to slot M-N, because many workshops can be scheduled in the same slot.'
)


class Organizer(Model):
    __tablename__ = 'organizer'
    __table_args__ = (
        ForeignKeyConstraint(['event_year'], ['event.year'], name='organizer_event_year_fkey'),
        ForeignKeyConstraint(['person_email'], ['person.email'], name='organizer_person_email_fkey'),
        PrimaryKeyConstraint('event_year', 'person_email', name='organizer_pkey'),
        {'comment': 'Tracks the roles of the madiSTEM organizers by year (M-N with event).'}
    )

    event_year: Mapped[int] = mapped_column(Integer, primary_key=True)
    person_email: Mapped[str] = mapped_column(String(32), primary_key=True)
    roles: Mapped[str] = mapped_column(String(512), nullable=False, comment='Comma-separated list of responsibilities')

    event: Mapped['Event'] = relationship('Event', back_populates='organizer')
    person: Mapped['Person'] = relationship('Person', back_populates='organizer')

    def __str__(self):
        return f"{self.person_email}"


class PersonWorkshop(Model):
    __tablename__ = 'person_workshop'
    __table_args__ = (
        ForeignKeyConstraint(['person_email'], ['person.email'], name='person_workshop_person_email_fkey'),
        ForeignKeyConstraint(['workshop_id'], ['workshop.id'], name='person_workshop_workshop_id_fkey'),
        PrimaryKeyConstraint('person_email', 'workshop_id', name='person_workshop_pkey'),
        {'comment': 'Connects a person to a workshop with a specific role.'}
    )

    person_email: Mapped[str] = mapped_column(String(32), primary_key=True)
    workshop_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    role: Mapped[str] = mapped_column(String(32), nullable=False, comment='Ex: organizer, volunteer')

    person: Mapped['Person'] = relationship('Person', back_populates='person_workshop')
    workshop: Mapped['Workshop'] = relationship('Workshop', back_populates='person_workshop')

    def __str__(self):
        return f"{self.person_email} {self.workshop_id}"
